/// Code generated by {{.PluginName}}. DO NOT EDIT.
use std::sync::Arc;

use axum::extract::{Extension, State};
use mikros::http::ServiceState;
use serde_derive::{Deserialize, Serialize};

use crate::{{.ModuleName}};{{$moduleName := .ModuleName}}

{{range .WireInputMessages -}}
#[derive(Deserialize)]
pub struct {{.Name}};

impl From<{{.Name}}> for {{$moduleName}}::{{.Name}} {
    fn from(m: {{.Name}}) -> Self {
        Self {}
    }
}
{{- end}}

{{range .OutboundMessages -}}
#[derive(Serialize)]
pub struct {{.Name}};

impl From<{{$moduleName}}::{{.Name}}> for {{.Name}} {
    fn from(m: {{$moduleName}}::{{.Name}}) -> Self {
        Self {}
    }
}
{{- end}}

pub struct Router {
    wrapper: Arc<dyn {{.ModuleName}}::{{.ModuleName}}_server::{{.ServiceName}}>,
}

{{range .Methods -}}
pub async fn {{toSnake .Name}}(
    State(state): State<Arc<mikros::Mutex<ServiceState>>>,
    Extension(router): Extension<Router>,
) -> String {
    "ok".to_string()
}
{{- end}}

#[derive(Clone)]
impl Router {
    pub fn new(server: Arc<dyn {{.ModuleName}}::{{.ModuleName}}_server::{{.ServiceName}}>) -> Self {
        Self {
            wrapper: server,
        }
    }

    pub fn routes(self) -> axum::Router<Arc<mikros::Mutex<ServiceState>>> {
        axum::Router::new()
            {{- range .Methods}}
            .route("{{.Endpoint}}", {{lower .HTTPMethod}}({{toSnake .Name}}))
            {{- end}}
            .layer(Extension(self.clone()))
    }
}