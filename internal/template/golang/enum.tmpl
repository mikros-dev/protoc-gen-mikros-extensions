// Code generated by {{.PluginName}}. DO NOT EDIT.
package {{.ModuleName}}

{{if .HasImportFor templateName}}
import (
{{- range .GetTemplateImports templateName}}
    {{.Alias}} "{{.Name}}"
{{- end}}
)
{{end}}

{{range .Enums}}
func (e {{.Name}}) FromString(s string) {{.Name}} {
    entry := s
    if !strings.HasPrefix(entry, "{{.Prefix}}") {
        entry = "{{.Prefix}}" + s
    }

    value, ok := {{.Name}}_value[entry]
    if !ok {
        // This should always be the _UNSPECIFIED
        return {{.Name}}(0)
    }

    return {{.Name}}(value)
}

func (e {{.Name}}) ValueWithoutPrefix() string {
    return strings.TrimPrefix(e.String(), "{{.Prefix}}")
}

{{if .IsErrorCode}}
func (e {{.Name}}) ErrorCode() int32 {
    return {{.Name}}_value[e.String()]
}
{{end}}

{{- if .HasEntryDefinition}}
var ({{$enumName := .Name}}
    entry_{{.Name}} = map[{{.Name}}]string {
    {{- range .Entries}}
        {{$enumName}}_{{.ProtoName}}: "{{.Name}}",
    {{- end}}
    }
)

func (e {{.Name}}) EntryName() string {
    return entry_{{.Name}}[e]
}
{{- end}}

{{if .IsBitflagKind}}
func (e {{.Name}}) Bitflag() uint64 {
    v := {{.Name}}_value[e.String()]
    if v == 0 {
        return uint64(0)
    }

    return uint64(1 << (v - 1))
}
{{end}}
{{end}} {{/*range .Enums*/}}
