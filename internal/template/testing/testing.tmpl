// Code generated by {{.PluginName}}. DO NOT EDIT.
package {{.ModuleName}}{{$packageName := .ModuleName}}

{{if .HasImportFor templateName}}
import (
{{- range .GetTemplateImports templateName}}
    {{.Alias}} "{{.Name}}"
{{- end}}
)
{{end}}

{{range .DomainMessages}}
// NewRandom{{.DomainName}} creates a new {{$packageName}}.{{.DomainName}}
// with random values following the rules inserted in the .proto file at the
// message declaration.
func NewRandom{{.DomainName}}(custom ...map[string]interface{}) *{{$packageName}}.{{.DomainName}} {
    {{- $prefix := toSnake .DomainName}}
    res := &{{$packageName}}.{{.DomainName}}{}

    {{range .Fields}}
    if v, ok := getCustom("{{$prefix}}.{{.JsonName}}", custom...); ok {
        {{- if and .IsPointer (not .IsProtoOptional)}}
        if v != nil {
        {{- end}}
            res.{{.GoName}} = {{.TestingValueBinding}}
        {{- if and .IsPointer (not .IsProtoOptional)}}
        }
        {{- end}}
    } else {
        res.{{.GoName}} = {{.TestingValueCall}}
    }
    {{end}}
    return res
}
{{end}}
func toPtr[T any](x T) *T {
	return &x
}

// getCustom retrieves a custom (user) value found inside the custom map argument
// for creating new entities.
func getCustom(key string, custom ...map[string]interface{}) (interface{}, bool) {
    if len(custom) > 0 {
        v, ok := custom[0][key]
        return v, ok
    }

    return nil, false
}

// zeroValue is a simple helper function that returns the zero value of a variable
// according to its type.
func zeroValue(v interface{}) reflect.Value {
	f := reflect.ValueOf(v)
	return reflect.Zero(f.Type())
}

// randomIndex generates a random integer number between limits.
func randomIndex(minN, maxN int, values []int) int32 {
    selected := rand.Intn(maxN - minN + 1) + minN
    return int32(values[selected])
}