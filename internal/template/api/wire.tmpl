// Code generated by {{.PluginName}}. DO NOT EDIT.
package {{.ModuleName}}

{{if .HasImportFor templateName}}
import (
{{- range .GetTemplateImports templateName}}
    {{.Alias}} "{{.Name}}"
{{- end}}
)
{{end}}

{{range .DomainMessages}}{{$receiver := .GetReceiverName}}
// IntoDomain is an internal helper function to convert a Wire type into the
// Domain.
func ({{$receiver}} *{{.WireName}}) IntoDomain() *{{.DomainName}} {
    if {{$receiver}} == nil {
        return nil
    }
    {{if or .HasArrayField .HasMapField}}
    domain := &{{.DomainName}}{
    {{- range .BindableFields templateName}}
        {{.GoName}}: {{.ConvertWireTypeToDomainType}},
    {{- end}}
    }

    {{range .ArrayFields}}{{$name := toLowerCamelCase .GoName}}
    var {{$name}} {{.DomainType}}
    for _, {{$loopReceiver := firstLower .GoName}}{{$loopReceiver}} := range {{$receiver}}.{{.GoName}} {
        {{$name}} = append({{$name}}, {{.ConvertWireTypeToArrayDomainType $loopReceiver}})
    }
    domain.{{.GoName}} = {{$name}}
    {{end -}}
    {{range .MapFields templateName}}{{$name := toLowerCamelCase .GoName}}
    {{$name}} := make({{.DomainType}})
    for k, v := range {{$receiver}}.{{.GoName}} {
        {{$name}}[k] = {{.ConvertWireTypeToMapDomainType "v"}}
    }
    domain.{{.GoName}} = {{$name}}
    {{end}}

    return domain
    {{- else}}
    return &{{.DomainName}}{
    {{- range .GetFields templateName}}
        {{.GoName}}: {{.ConvertWireTypeToDomainType}},
    {{- end}}
    }
    {{- end}}
}
{{end}}

func toDomainTime(s *ts.Timestamp) *time.Time {
    if s == nil {
        return nil
    }

    return toPtr(s.AsTime())
}

func toDomainMap(s *structpb.Struct) map[string]interface{} {
    if s == nil {
        return nil
    }

    return s.AsMap()
}

func toDomainInterface(s *structpb.Value) interface{} {
    if s == nil {
        return nil
    }

    return s.AsInterface()
}
