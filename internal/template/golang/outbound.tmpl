// Code generated by {{.PluginName}}. DO NOT EDIT.
package {{.ModuleName}}{{$context := .}}

{{if .HasImportFor templateName}}
import (
{{- range .GetTemplateImports templateName}}
    {{.Alias}} "{{.Name}}"
{{- end}}
)
{{end}}

{{range $msg := .OutboundMessages}}{{$receiver := .GetReceiverName}}
type {{.OutboundName}} struct {
    {{- range .GetFields templateName}}
    {{.OutboundName}} {{.OutboundType}} {{.OutboundTag}}
    {{- end}}
}

func ({{$receiver}} *{{.Name}}) IntoOutboundOrNil() *{{.OutboundName}} {
    if r := {{$receiver}}.IntoOutbound(); r != nil {
        return r.(*{{.OutboundName}})
    }

    return nil
}

func ({{$receiver}} *{{.Name}}) IntoOutbound() interface{} {
    if {{$receiver}} == nil {
        return nil
    }

    {{if or .HasArrayField .HasMapField ($context.HasAddonIntoOutboundExtensionContent $msg)}}
    out := &{{.OutboundName}}{
    {{- range .BindableFields templateName}}
        {{.GoName}}: {{.ConvertWireOutputToOutbound $receiver}},
    {{- end}}
    }

    {{range .ArrayFields}}{{$name := toLowerCamelCase .GoName}}
    var {{$name}} {{.OutboundType}}
    for _, {{$loopReceiver := firstLower .GoName}}{{$loopReceiver}} := range {{$receiver}}.{{.GoName}} {
        {{$name}} = append({{$name}}, {{.ConvertWireOutputToArrayOutbound $loopReceiver}})
    }
    out.{{.GoName}} = {{$name}}
    {{end -}}
    {{range .MapFields}}{{$name := toLowerCamelCase .GoName}}
    {{$name}} := make({{.OutboundType}})
    for k, v := range {{$receiver}}.{{.GoName}} {
        {{$name}}[k] = {{.ConvertWireOutputToMapOutbound "v"}}
    }
    out.{{.GoName}} = {{$name}}
    {{end}}

    {{- if $context.HasAddonIntoOutboundExtensionContent $msg}}
    {{$context.AddonIntoOutboundExtensionContent $msg $receiver}}
    {{- end}}

    return out
    {{- else}}
    return &{{.OutboundName}}{
    {{- range .GetFields templateName}}
        {{.GoName}}: {{.ConvertWireOutputToOutbound $receiver}},
    {{- end}}
    }
    {{- end}}
}
{{end}}