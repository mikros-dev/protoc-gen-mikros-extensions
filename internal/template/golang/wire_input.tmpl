// Code generated by {{.PluginName}}. DO NOT EDIT.
package {{.ModuleName}}

{{if .HasImportFor templateName}}
import (
{{- range .GetTemplateImports templateName}}
    {{.Alias}} "{{.Name}}"
{{- end}}
)
{{end}}

{{range .WireInputMessages}}{{$receiver := .GetReceiverName}}
{{- if .IsWireInputKind}}
type {{.DomainName}} struct {
    {{- range .GetFields templateName}}
    {{.DomainName}} {{.DomainType}} {{.InboundTag}}
    {{- end}}
}
{{end}}
func ({{$receiver}} *{{.DomainName}}) IntoWireInput() *{{.WireName}} {
    if {{$receiver}} == nil {
        return nil
    }
    {{if or .HasArrayField .HasMapField}}
    wire := &{{.WireName}}{
    {{- range .BindableFields templateName}}
        {{.GoName}}: {{.ConvertDomainTypeToWireInputType}},
    {{- end}}
    }

    {{range .ArrayFields}}{{$name := toLowerCamelCase .GoName}}
    var {{$name}}Elements {{.WireType}}
    for _, {{$loopReceiver := firstLower .GoName}}{{$loopReceiver}} := range {{$receiver}}.{{.GoName}} {
        {{$name}}Elements = append({{$name}}Elements, {{.ConvertDomainTypeToArrayWireInputType $loopReceiver}})
    }
    wire.{{.GoName}} = {{$name}}Elements
    {{end -}}
    {{range .MapFields templateName}}{{$name := toLowerCamelCase .GoName}}
    {{$name}}Elements := make({{.WireType}})
    for k, v := range {{$receiver}}.{{.GoName}} {
        {{$name}}Elements[k] = {{.ConvertDomainTypeToMapWireInputType "v"}}
    }
    wire.{{.GoName}} = {{$name}}Elements
    {{end}}

    return wire
    {{- else}}
    return &{{.WireName}}{
    {{- range .GetFields templateName}}
        {{.GoName}}: {{.ConvertDomainTypeToWireInputType}},
    {{- end}}
    }
    {{- end}}
}
{{end}}